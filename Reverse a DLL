class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        if self.head:
            self.head.prev = new_node
        self.head = new_node

    def reverse(self):
        current = self.head
        temp = None
        
        while current:
            # Swap prev and next
            temp = current.prev
            current.prev = current.next
            current.next = temp
            
            # Move to next node (which is previous before swapping)
            current = current.prev
        
        # After loop, temp will be on node before None, which is the new head
        if temp:
            self.head = temp.prev

    def print_list(self):
        current = self.head
        print("Doubly Linked List:", end=" ")
        while current:
            print(current.data, end=" <-> " if current.next else "")
            current = current.next
        print()

# Example usage:
dll = DoublyLinkedList()
dll.insert_at_beginning(10)
dll.insert_at_beginning(20)
dll.insert_at_beginning(30)

print("Original list:")
dll.print_list()

dll.reverse()

print("Reversed list:")
dll.print_list()
